// prisma/schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = [] // "jsonProtocol" removed as it's now stable
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
  refunded
}

enum UserRole {
  customer
  staff
  admin
}

enum DiscountType {
  percentage
  fixed_amount
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  emailVerified     DateTime?
  passwordHash      String?
  role              UserRole           @default(customer)
  firstName         String?
  lastName          String?
  avatarUrl         String?
  stripeCustomerId  String?            @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  preferences       UserPreference?
  sessions          Session[]
  reviews           Review[]
  addresses         Address[]
  orders            Order[]
  wishlists         Wishlist[]
  emailSubscription EmailSubscription?
  cart              Cart?

  @@index([email])
}

model UserPreference {
  id                 String   @id @default(uuid())
  theme              String   @default("light")
  emailNotifications Boolean  @default(true)
  language           String   @default("en")
  currency           String   @default("USD")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@index([slug])
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  logoUrl     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id                String           @id @default(uuid())
  sku               String           @unique
  name              String
  slug              String           @unique
  description       String?
  shortDescription  String?
  price             Decimal          @db.Decimal(10, 2)
  isActive          Boolean          @default(true)
  isFeatured        Boolean          @default(false)
  scentNotes        Json             @default("{}")
  ingredients       String[]
  usageInstructions String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  categoryId        String
  category          Category         @relation(fields: [categoryId], references: [id])
  brandId           String?
  brand             Brand?           @relation(fields: [brandId], references: [id])
  variants          ProductVariant[]
  images            ProductImage[]
  reviews           Review[]
  wishlists         Wishlist[]
  orderItems        OrderItem[]

  @@index([slug])
  @@index([categoryId])
}

model ProductVariant {
  id                String      @id @default(uuid())
  sku               String      @unique
  name              String
  price             Decimal     @db.Decimal(10, 2)
  inventoryQuantity Int         @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  productId         String
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems         CartItem[]
  wishlists         Wishlist[]
  orderItems        OrderItem[]

  @@index([productId])
  @@index([sku])
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  altText   String?
  position  Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id                 String        @id @default(uuid())
  rating             Int
  title              String?
  comment            String?
  isVerifiedPurchase Boolean       @default(false)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  productId          String
  product            Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId             String
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  images             ReviewImage[]

  @@index([productId])
  @@index([userId])
}

model ReviewImage {
  id       String @id @default(uuid())
  url      String
  reviewId String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?    @unique
  sessionId String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String         @id @default(uuid())
  quantity  Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  cartId    String
  cart      Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([cartId, variantId])
}

model Address {
  id            String   @id @default(uuid())
  type          String   @default("shipping")
  isDefault     Boolean  @default(false)
  firstName     String
  lastName      String
  addressLine1  String
  addressLine2  String?
  city          String
  stateProvince String
  postalCode    String
  countryCode   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
}

model Order {
  id                String      @id @default(uuid())
  orderNumber       String      @unique
  status            OrderStatus @default(pending)
  total             Decimal     @db.Decimal(10, 2)
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: NoAction)
  shippingAddressId String
  shippingAddress   Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String
  billingAddress    Address     @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items             OrderItem[]
  appliedCoupons    Json?

  @@index([userId])
}

model OrderItem {
  id        String         @id @default(uuid())
  quantity  Int
  price     Decimal        @db.Decimal(10, 2)
  orderId   String
  order     Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: NoAction)
  productId String
  product   Product        @relation(fields: [productId], references: [id], onDelete: NoAction)
}

model Coupon {
  id            String       @id @default(uuid())
  code          String       @unique
  discountType  DiscountType
  discountValue Decimal      @db.Decimal(10, 2)
  isActive      Boolean      @default(true)
  validUntil    DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Wishlist {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  productId String
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, variantId])
  @@unique([userId, productId])
}

model EmailSubscription {
  id           String   @id @default(uuid())
  email        String   @unique
  isActive     Boolean  @default(true)
  subscribedAt DateTime @default(now())
  userId       String?  @unique
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}
