// This Prisma schema is based on the architecture document for The Scent.
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  pending
  refunded
}

enum UserRole {
  customer
  staff
}

enum DiscountType {
  percentage
  fixed_amount
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  name             String?
  password         String?
  role             UserRole  @default(customer)
  stripeCustomerId String?   @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  preferences      UserPreference?
  sessions         Session[]
  orders           Order[]
  reviews          Review[]
  wishlists        Wishlist[]
  emailSubscriptions EmailSubscription[]
}

model UserPreference {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  isActive  Boolean  @default(true)
  products  Product[]
  updatedAt DateTime @updatedAt
}

model Brand {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  products  Product[]
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  price       Float
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  brandId     String?
  brand       Brand?   @relation(fields: [brandId], references: [id])
  variants    ProductVariant[]
  images      ProductImage[]
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductVariant {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  sku       String   @unique
  size      String?
  price     Float?
  stock     Int      @default(0)
  images    ProductImage[]
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model InventoryTransaction {
  id          String   @id @default(uuid())
  variantId   String
  variant     ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  quantity    Int
  createdById String?
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  images    ReviewImage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReviewImage {
  id        String   @id @default(uuid())
  url       String
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Cart {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  sessionId String?
  items     CartItem[]
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  updatedAt DateTime @updatedAt
  @@unique([cartId, variantId])
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  line1     String
  line2     String?
  city      String
  state     String
  postalCode String
  country   String
  updatedAt DateTime @updatedAt
  billingOrders Order[] @relation("BillingAddress")
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressId     String?
  billingAddress Address?   @relation("BillingAddress", fields: [addressId], references: [id])
  status        OrderStatus @default(pending)
  items         OrderItem[]
  orderNumber   String      @unique
  total         Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
}

model Coupon {
  id        String   @id @default(uuid())
  code      String   @unique
  type      DiscountType
  value     Float
  isActive  Boolean  @default(true)
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  @@unique([userId, productId, variantId])
}

model EmailSubscription {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  email     String   @unique
  createdAt DateTime @default(now())
}
